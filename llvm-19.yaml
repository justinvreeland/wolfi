package:
  name: llvm-19
  version: 19.1.0
  epoch: 0
  description: "low-level virtual machine - core frameworks"
  copyright:
    - license: Apache-2.0
  resources:
    cpu: 10
    memory: 32Gi

environment:
  contents:
    packages:
      - binutils-dev
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - git
      - libffi-dev
      - libxml2-dev
      - openssf-compiler-options
      - pkgconf
      - python3
      - samurai
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/llvm/llvm-project
      tag: llvmorg-${{package.version}}
      expected-commit: a4bf6cd7cfb1a1421ba92bca9d017b49936c55e4

  - runs: |
      ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

      cmake -B build -G Ninja -S llvm -Wno-dev \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/lib/llvm-19 \
        -DFFI_INCLUDE_DIR="${ffi_include_dir}" \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_BUILD_EXAMPLES=OFF \
        -DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_BUILD_TESTS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_DEFAULT_TARGET_TRIPLE="$(uname -m)-unknown-linux-gnu" \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_LIBCXX=OFF \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_TERMINFO=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_HOST_TRIPLE="$(uname -m)-unknown-linux-gnu" \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DLLVM_APPEND_VC_REV=OFF \
        -DLLVM_INCLUDE_BENCHMARKS=OFF

  - runs: |
      cmake --build build --target llvm-tblgen

  - runs: |
      cmake --build build

  - runs: |
      DESTDIR="${{targets.contextdir}}" cmake --install build

  - runs: |
      mkdir -p "${{targets.contextdir}}"/usr/bin

      for path in "${{targets.contextdir}}"/usr/lib/${{package.name}}/bin/*; do
        name=${path##*/}
        ln -s ../lib/${{package.name}}/bin/$name "${{targets.contextdir}}"/usr/bin/$name
      done

  - runs: |
      mkdir -p "${{targets.contextdir}}"/usr/lib/cmake
      ln -s /usr/lib/"${{package.name}}"/lib/cmake/llvm "${{targets.contextdir}}"/usr/lib/cmake/llvm

  - uses: strip

subpackages:
  - name: "libLLVM-19"
    description: "LLVM 19 runtime library"
    pipeline:
      - runs: |
          soname="libLLVM.so.19.1"
          sonamefull="libLLVM-19.so"
          mkdir -p "${{targets.contextdir}}"/usr/lib/${{package.name}}/lib/
          mv "${{targets.destdir}}"/usr/lib/${{package.name}}/lib/$soname "${{targets.contextdir}}"/usr/lib/
          ln -s $soname "${{targets.contextdir}}"/usr/lib/$sonamefull
          ln -sf ../../$soname "${{targets.destdir}}"/usr/lib/${{package.name}}/lib/$soname
          ln -sf ../../$soname "${{targets.destdir}}"/usr/lib/${{package.name}}/lib/$sonamefull

  - name: "${{package.name}}-dev"
    description: "headers for ${{package.name}}"
    pipeline:
      - uses: split/dev
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/lib/${{package.name}}/bin
          mv "${{targets.destdir}}"/usr/lib/${{package.name}}/bin/llvm-config "${{targets.contextdir}}"/usr/lib/${{package.name}}/bin/
    dependencies:
      runtime:
        - llvm-19

update:
  enabled: true
  github:
    identifier: llvm/llvm-project
    strip-prefix: llvmorg-
    tag-filter: llvmorg-19.1.
    use-tag: true

test:
  pipeline:
    - name: llvm interpreter version test
      runs: |
        lli --version | grep ${{package.version}}
    - name: llvm compiler version test
      runs: |
        llc --version | grep ${{package.version}}
    - name: llvm interpreter test
      runs: |
        cat <<EOF > helloWorld.ll
        ; Copied directly from the documentation
        ; Declare the string constant as a global constant.
        @.str = private unnamed_addr constant [13 x i8] c"hello world\0A\00"

        ; External declaration of the puts function
        declare i32 @puts(i8* nocapture) nounwind

        ; Definition of main function
        define i32 @main() { ; i32()*
            ; Convert [13 x i8]* to i8  *...
            %cast210 = getelementptr [13 x i8],[13 x i8]* @.str, i64 0, i64 0

            ; Call puts function to write out the string to stdout.
            call i32 @puts(i8* %cast210)
            ret i32 0
        }

        ; Named metadata
        !0 = !{i32 42, null, !"string"}
        !foo = !{!0}
        EOF
        lli helloWorld.ll | grep "hello world" || exit 1
        llc helloWorld.ll
        cat helloWorld.s | grep "hello world" || exit 1
